# Define a class for the syntax tree nodes
class SyntaxTreeNode :
    def __init__(self, node_type) :
        self.node_type = node_type
        self.children = []

    def add_child(self, child) :
        self.children.append(child) 

    # Pretty printer code and comments generated by ChatGPT 
    def pretty_print(self, indent=0):
        # Print the current node with indentation
        print('  ' * indent + f"{self.node_type}", end='')

        # If the node has any special fields (like function name or expression), print them
        if hasattr(self, 'functionName') and hasattr(self, 'returnType'):
            print(f": {self.returnType} {self.functionName}")
        
        elif hasattr(self, 'statement'):
            print(f": {self.statement}")
        elif hasattr(self, 'exp'):
            print(f": {self.exp}")
        else:
            print()  # Just a newline if no extra info

        # Recursively print all child nodes
        for child in self.children:
            if isinstance(child, SyntaxTreeNode):
                child.pretty_print(indent + 1)
            else:
                # If the child is not a node (unlikely), just print it raw
                print('  ' * (indent + 1) + str(child))

    
    def __repr__(self):
        return f"{self.node_type}({self.children})"

# Create an abstract class for each type of node

# Program AST node: contains functions listed in the program
class Program(SyntaxTreeNode) :
    def __init__(self) :
        super().__init__("Program")


# Function AST node: contains name of function and children
# child nodes are statements and function calls within function body
class Function(SyntaxTreeNode) :
    def __init__(self, returnType, functionName) :
        super().__init__("Function")
        self.returnType = returnType
        self.functionName = functionName


# Statement AST node: contains statements in functions
class Statement(SyntaxTreeNode) :
    def __init__(self, statement) :
        super().__init__("Statement")
        self.statement = statement

# Binary AST node: contains operands/constants in statements
class Constant(SyntaxTreeNode) :
    def __init__(self, exp) :
        super().__init__("Constant")
        self.exp = exp

